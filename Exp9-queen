#include <iostream>
using namespace std;

#define N 4

// Function to print the board
void printBoard(int board[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
}

// Function to check if placing a queen at board[row][col] is valid
bool isValid(int board[N][N], int row, int col) {
    // Check the column for any other queen
    for (int i = 0; i < col; i++) {
        if (board[row][i]) {
            return false;
        }
    }

    // Check upper diagonal (left side)
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j]) {
            return false;
        }
    }

    // Check lower diagonal (left side)
    for (int i = row, j = col; j >= 0 && i < N; i++, j--) {
        if (board[i][j]) {
            return false;
        }
    }

    return true;
}

// Recursive function to solve the N-Queens problem
bool solveNQueen(int board[N][N], int col) {
    // Base case: If all queens are placed
    if (col >= N) {
        return true;
    }

    // Try placing a queen in each row for the current column
    for (int i = 0; i < N; i++) {
        // Check if it's safe to place the queen
        if (isValid(board, i, col)) {
            board[i][col] = 1;  // Place the queen

            // Recur to place the rest of the queens
            if (solveNQueen(board, col + 1)) {
                return true;
            }

            // Backtrack: If placing the queen doesn't lead to a solution, remove it
            board[i][col] = 0;
        }
    }

    // If no position is valid, return false
    return false;
}

// Function to check if a solution exists and print the solution
bool checkSolution() {
    int board[N][N] = {0};  // Initialize the board with zeros

    if (!solveNQueen(board, 0)) {
        cout << "No solution exists!" << endl;
        return false;
    }

    // Print the solution
    printBoard(board);
    return true;
}

int main() {
    checkSolution();
    return 0;
}

