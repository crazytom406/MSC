package exp2;

import java.io.*;
import java.net.*;
public class ClientEx
{
	public static void main(String[] args) 
	{
		try 
		{
			// Define the server's IP address and port
			String serverIP = "127.0.0.1"; // Server's IP address (localhost in this case)
			int serverPort = 12345; // Port on which the server is listening
			// Create a socket to connect to the server
			Socket socket = new Socket(serverIP, serverPort);
			// Set up input and output streams for communication
			BufferedReader in = new BufferedReader(new 
			InputStreamReader(socket.getInputStream()));
			PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
			// Read messages from the user and send them to the server
			BufferedReader userInput = new BufferedReader(new 
			InputStreamReader(System.in));
			String message;
			while (true) 
			{
				System.out.print("You: ");
				message = userInput.readLine(); // Read user input
				out.println(message); // Send message to the server
				if (message.equalsIgnoreCase("bye")) 
				{
					break; // Exit the loop if the user types "bye"
				}
				String response = in.readLine(); // Receive server's response
				System.out.println("Server: " + response); // Print server's response
			}
			// Close resources
			userInput.close();
			in.close();
			out.close();
			socket.close();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		}
	}
}

//server
import java.io.*;
import java.net.*;
public class ServerEx
{
	public static void main(String[] args) 
	{
		try 
		{
			// Create a ServerSocket that listens on a specific port
			int port = 12345;
			ServerSocket serverSocket = new ServerSocket(port);
			System.out.println("Server listening on port " + port);
			// Accept incoming client connections
			Socket clientSocket = serverSocket.accept();
			System.out.println("Client connected: " + clientSocket.getInetAddress().getHostAddress());
			// Set up input and output streams
			BufferedReader in = new BufferedReader(new 
			InputStreamReader(clientSocket.getInputStream()));
			PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
			// Read and display messages from the client
			String message;
			while ((message = in.readLine()) != null) 
			{
				System.out.println("Client: " + message);
				out.println("Server received: " + message); // Send response to client
			}
			// Close resources
			in.close();
			out.close();
			clientSocket.close();
			serverSocket.close();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		}
	}
}


