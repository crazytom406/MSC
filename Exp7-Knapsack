#include <iostream>
#include <algorithm>
using namespace std;

struct Item {
    int value, weight;

    // Constructor
    Item(int v = 0, int w = 0) : value(v), weight(w) {}
};

// Comparison function to sort items by value-to-weight ratio in descending order
bool compare(Item a, Item b) {
    double r1 = (double)a.value / a.weight;
    double r2 = (double)b.value / b.weight;
    return r1 > r2;
}

double fractionalKnapsack(struct Item arr[], int n, int size) {
    sort(arr, arr + n, compare);

    double totalValue = 0.0;
    for (int i = 0; i < n; i++) {
        if (size >= arr[i].weight) {
            size -= arr[i].weight;
            totalValue += arr[i].value;
        } else {
            totalValue += arr[i].value * ((double)size / arr[i].weight);
            break;
        }
    }
    return totalValue;
}

int main() {
    int n, capacity;

    cout << "Enter the number of items: ";
    cin >> n;

    Item arr[n];
    cout << "Enter the value and weight of each item:\n";
    for (int i = 0; i < n; i++) {
        cin >> arr[i].value >> arr[i].weight;
    }

    cout << "Enter the capacity of the knapsack: ";
    cin >> capacity;

    double maxValue = fractionalKnapsack(arr, n, capacity);

    cout << "Maximum value in the knapsack = " << maxValue << endl;

    return 0;
}
ex
